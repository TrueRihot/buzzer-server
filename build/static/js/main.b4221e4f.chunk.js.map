{"version":3,"sources":["answers.js","overlay.js","adminUI.js","gameUi.js","werbungraten.js","App.js","reportWebVitals.js","index.js"],"names":["Answers","props","useState","answer","correct","isCorrect","toggleCorrect","emitToggle","input","emit","undefined","adminToolEmitter","team","answerIndex","questionIndex","antwort","tick","onClick","className","Overlay","data","points","map","e","dataHeighest","Math","max","dataGraphs","el","dataHeight","style","height","getGraphs","showOverlay","clickhandle","AdminUI","state","renderAnswers","bind","toggleOverlay","showAuswertung","antworten","this","answers","ret","that","forEach","push","setState","fragenIndex","frage","showQuestion","auswertung","React","Component","GameUI","onClickHandle","event","preventDefault","error","sent","textInput","current","value","submitHandler","createRef","prevProps","type","id","ref","Werbungraten","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","teamName","websocketConnect","throwError","responseText","send","throwThis","isInitialized","currentQuestion","questionVisible","isAdmin","socket","timer","showData","joinGame","submitSocket","quitHandler","connected","name","console","log","io","on","message","navigator","vibrate","disconnect","index","msg","question","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4221e4f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport function Answers(props) {\r\n    const [isCorrect, toggleCorrect] = useState(props.answer.correct);\r\n\r\n    let emitToggle = (input) =>{\r\n        let emit = undefined\r\n        switch (input) {\r\n            case true:\r\n                emit = \"answerCorrect\"\r\n                break;\r\n        \r\n            default:\r\n                emit = \"answerFalse\"\r\n                break;\r\n        }\r\n        props.adminToolEmitter(emit,{team: props.answer.team, answerIndex: props.answer.questionIndex});\r\n        toggleCorrect(input);\r\n    }\r\n\r\n    return (\r\n    <tr key={props.answer.team}>\r\n        <td>{props.answer.team}</td>\r\n        <td>{props.answer.antwort}</td>\r\n        <td>{props.answer.tick}</td>\r\n        <td>{isCorrect ? \"Richtig\" : \"Falsch\"}</td>\r\n        <td>\r\n            <button onClick={() => emitToggle(true)} className=\"result-button\">Richtig</button>\r\n            <button onClick={() => emitToggle(false)}className=\"result-button\">Falsch</button>\r\n        </td>\r\n     </tr>\r\n    )\r\n}","export function Overlay(props){\r\n    let data= props.data;\r\n    let points = data.map(e => e.points);\r\n    let dataHeighest = Math.max(...points);\r\n\r\n    const getGraphs = el => {\r\n        let dataHeight = el.points/dataHeighest * 100 + \"%\";\r\n        return(\r\n            <div className=\"team-graph\" style={{height: dataHeight }}>\r\n                <div className=\"overlay-team\">\r\n                    {el.team}\r\n                </div>\r\n                <div className=\"overlay-points\">\r\n                    {el.points}\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n   \r\n    let dataGraphs = data.map((e) => getGraphs(e));\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className={`overlay ${props.showOverlay ? \"active\" : \"hidden\"}`}>\r\n            <button className=\"quit\"onClick={ () => props.clickhandle()}>❮</button>\r\n            <div className=\"auswertung\">\r\n            <h2>Auswertung</h2>\r\n\r\n            <div className=\"graphs\">\r\n                {dataGraphs}\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n\r\n};","import React from 'react';\r\nimport {Answers} from './answers';\r\nimport { Overlay } from './overlay';\r\n\r\nexport class AdminUI extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showOverlay: false\r\n        }\r\n        this.renderAnswers = this.renderAnswers.bind(this);\r\n        this.toggleOverlay = this.toggleOverlay.bind(this);\r\n        this.showAuswertung = this.showAuswertung.bind(this)\r\n    }\r\n\r\n\r\n    renderAnswers(){\r\n        let antworten = this.props.answers;\r\n        let ret = []\r\n        let that = this;\r\n        antworten.forEach(function(answer){ \r\n            ret.push(<Answers answer={answer} adminToolEmitter={that.props.adminToolEmitter}/>)\r\n        });\r\n        return ret\r\n    }\r\n\r\n    toggleOverlay(){\r\n        if (this.state.showOverlay) {\r\n            this.setState({showOverlay: false})\r\n        }else{\r\n            this.setState({showOverlay: true})\r\n        }\r\n    }\r\n\r\n    showAuswertung(){\r\n        this.props.adminToolEmitter(\"showData\");\r\n        this.toggleOverlay();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <h2>Adminkonsole</h2>\r\n                <p>Frage Nummer: {this.props.fragenIndex + 1} <strong>{this.props.frage}</strong>\r\n                </p>\r\n                <div>{this.props.tick}</div>\r\n                <p>{this.props.showQuestion ? <strong>Die Frage ist aktuel SICHTBAR</strong> : <strong>Die Frage ist aktuell NICHT sichtbar</strong>}</p>\r\n\r\n                <div className=\"flex flex-spacing flex-wrap control-element\">\r\n                    <button onClick={() => this.props.adminToolEmitter(\"toggleVisibility\")}>\r\n                        {this.props.showQuestion ? \"Frage verstecken\" : \"Frage zeigen\"}\r\n                    </button>\r\n\r\n                    <div>\r\n                        <button onClick={() => this.props.adminToolEmitter(\"startCountdown\")} className={!this.props.showQuestion ? \"disabled\" : \"\"}>Countdown Starten</button>\r\n                        <div className=\"tooltip\">Die Frage ist noch nicht Sichtbar!</div>\r\n                    </div>\r\n                    <button onClick={() => this.props.adminToolEmitter(\"stopCountdown\")}>Countdown stoppen</button>\r\n                    <button onClick={() => this.props.adminToolEmitter(\"resetCountdown\")}>Stoppt und resettet den Countdown</button>\r\n                </div>\r\n                <div className=\"flex flex-spacing flex-wrap control-element\">\r\n                    <button onClick={() => this.props.adminToolEmitter('prevQuestion')}>Vorherige Frage</button>\r\n                    <button onClick={() => this.props.adminToolEmitter(\"nextQuestion\")}>Nächste Frage</button>\r\n                </div>\r\n\r\n                <div className=\"flex flex-spacing flex-wrap control-element\">\r\n                    <button onClick={() =>this.props.adminToolEmitter(\"saveData\")}>Speichern</button>\r\n                    <button onClick={() => this.showAuswertung()}>Auswerten</button>\r\n                </div>\r\n\r\n                <div className=\"control-element\">\r\n                    <h3>Antworten</h3>\r\n                    <table className=\"data-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Team</th>\r\n                                <th>Antwort</th>\r\n                                <th>Tick</th>\r\n                                <th>Status</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderAnswers()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n           \r\n                <Overlay data={this.props.auswertung} clickhandle={this.toggleOverlay} showOverlay={this.state.showOverlay}/>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nexport class GameUI extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sent: false,\r\n            error: \"\"\r\n        }\r\n        this.textInput = React.createRef(null);\r\n        this.onClickHandle = this.onClickHandle.bind(this);\r\n    }\r\n    \r\n\r\n    onClickHandle = (event) => {\r\n        event.preventDefault();\r\n        this.setState({error: \"\"})\r\n        if (!this.state.sent && this.props.tick > 0 && this.props.showQuestion) {\r\n            let input = this.textInput.current.value;\r\n            if (input) {\r\n                this.props.submitHandler({ antwort: input });\r\n                this.setState({sent: true})\r\n                this.textInput.current.value = \"\";\r\n            }\r\n        }else{\r\n            this.setState({error: \"Du kannst gerade keine Frage absenden!\"})\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if (this.props.frage !== prevProps.frage) {\r\n            this.setState({sent: false, error: \"\"});\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <>\r\n            <h3>Frage:</h3>\r\n            <div className=\"question-tick\">\r\n                {this.props.showQuestion ? <strong>{this.props.frage}</strong> : <strong></strong>}\r\n                <div className=\"tick\">{this.props.tick}</div>\r\n            </div>\r\n            <form className=\"flex flex-wrap input-button\">\r\n                <input type=\"text\" className=\"input\" id=\"answer\" ref={this.textInput}></input>\r\n                <button type=\"submit\" className={ `send-answer ${this.props.tick === 0 || !this.props.showQuestion || this.state.sent ? \"disabled\" : \"\"}`}  onClick={this.onClickHandle} >Absenden!</button>\r\n                <div>{this.state.error}</div>\r\n            </form>\r\n            </>\r\n        );\r\n}\r\n}   ","import React from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { AdminUI } from './adminUI';\r\nimport { GameUI } from './gameUi';\r\nimport \"./css/all_styles.css\"\r\n\r\nexport class Werbungraten extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isInitialized: false,\r\n            teamName: \"\",\r\n            error: \"\",\r\n            currentQuestion: {},\r\n            questionVisible: false,\r\n            isAdmin: false,\r\n            socket: undefined,\r\n            timer: 30,\r\n            answers: [],\r\n            showData: []\r\n        };\r\n        this.input = React.createRef();\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n        this.throwError = this.throwError.bind(this);\r\n        this.joinGame = this.joinGame.bind(this);\r\n        this.submitSocket = this.submitSocket.bind(this);\r\n        this.quitHandler = this.quitHandler.bind(this);\r\n        this.websocketConnect = this.websocketConnect.bind(this);\r\n        this.adminToolEmitter = this.adminToolEmitter.bind(this); \r\n    }\r\n    \r\n    submitHandler = (e) => {\r\n        //Handling the Login process of the app\r\n        const that = this;\r\n        e.preventDefault();\r\n        let current = this.input.current.value; // getting the value from Ref\r\n        if (current) {\r\n            //Opening a new xhr request to push the team name\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('POST', 'http://192.168.178.52:8080/newteam/' + current, true);\r\n            xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\r\n            xhr.onreadystatechange = function () {//Call a function when the state changes.\r\n                if (xhr.readyState === 4 && xhr.status === 200) {\r\n                    //if the team name is avaliable save it to the team name and start the websocket connection for the game\r\n                    that.setState({ teamName: current });\r\n                    that.setState({ error: \"\" })\r\n                    that.websocketConnect();\r\n                }\r\n                if (xhr.readyState === 4 && xhr.status === 409) {\r\n                    //error handling - if the team exists tell the sad players\r\n                    that.throwError(xhr.responseText);\r\n                }\r\n            }\r\n            xhr.send(current);\r\n        }\r\n    }\r\n\r\n    //handy function to throw errors into the error block of the app :)\r\n    throwError = (throwThis) => {\r\n        this.setState({ error: throwThis });\r\n    }\r\n\r\n    // creating the websocket connection\r\n    websocketConnect() {\r\n        const that = this;\r\n        // schaut ob es schon einen socket gibt\r\n        if (!that.state.socket) {\r\n            // Create WebSocket connection.\r\n            console.log(\"connecting to websocket\")\r\n            that.state.socket = io(\"http://192.168.178.52:8080\");\r\n\r\n            // Connection opened\r\n            that.state.socket.on('connect', function () {\r\n                console.log(\"Joining Game\");\r\n                // Dem Spiel beitreten\r\n                that.joinGame();\r\n                // Die Ui wird initialisiert\r\n                that.setState({ isInitialized: true });\r\n                // Wenn eine neue Frage geladen wird, wird sie im state gespeichert.\r\n                that.state.socket.on(\"loadQuestion\", function (message) {\r\n                    that.setState({ currentQuestion: message, questionVisible: message.questionVisible, answers: message.answers })\r\n                });\r\n\r\n                // on tick für den Countdown\r\n                that.state.socket.on('tick', function (message) {\r\n                    that.setState({ timer: message.tick})\r\n                    if (message.tick < 10) {\r\n                        navigator.vibrate(200);\r\n                    }\r\n                })\r\n\r\n                // resettet den Timer\r\n                that.state.socket.on('resetTick', function () {\r\n                    that.setState({timer: 30})\r\n                });\r\n\r\n                // on Admin ui für admin stuff\r\n                that.state.socket.on('loadAdminUI', function () {\r\n                    that.setState({ isAdmin: true })\r\n                });\r\n\r\n                that.state.socket.on('disconnect', function () {\r\n                    console.log('Disconnected')\r\n                });\r\n\r\n                that.state.socket.on('teamInUse', function (){\r\n                    that.state.socket.disconnect();\r\n                    that.setState({\r\n                        isInitialized: false,\r\n                        teamName: \"\",\r\n                        error: \"Team ist bereits ingame\",\r\n                        currentQuestion: {},\r\n                        questionVisible: false,\r\n                        isAdmin: false,\r\n                        socket: undefined,\r\n                        answers: [],\r\n                        showData: []\r\n                    });\r\n                });\r\n\r\n                that.state.socket.on('adminNewAnswer',function (message) {\r\n                    that.setState({answers: message.answers})\r\n                    console.log('setting Answers' + message.answers)\r\n                });\r\n\r\n                that.state.socket.on('showAuswertung', function (message) {\r\n                    that.setState({\r\n                        showData: message.auswertung\r\n                    })\r\n                });\r\n\r\n            });\r\n            // wenn schon eine Connection besteht\r\n        }else if (that.state.socket.connected) {\r\n            that.state.socket.emit('joinGame', { name: that.state.teamName });\r\n            that.setState({ isInitialized: true });\r\n        }\r\n    }\r\n\r\n    joinGame() {\r\n        // Schickt die Info, dass dem Spiel gejoined werden will plus den teamnamen.\r\n        const that = this;\r\n        if (this.state.socket) {\r\n            try {\r\n                this.state.socket.emit('joinGame', { name: that.state.teamName });\r\n            } catch (e) {\r\n                this.throwError(e);\r\n            }\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    submitSocket(answer) {\r\n        // Frage wird abgeschickt zur aktuellen Frage.\r\n        answer.questionIndex = this.state.currentQuestion.index;\r\n        this.state.socket.emit('submit', answer);\r\n    }\r\n\r\n    quitHandler() {\r\n        this.state.socket.disconnect();\r\n        this.setState({\r\n            isInitialized: false,\r\n            teamName: \"\",\r\n            error: \"\",\r\n            currentQuestion: {},\r\n            questionVisible: false,\r\n            isAdmin: false,\r\n            socket: undefined,\r\n            answers: [],\r\n            showData: []\r\n        });\r\n    }\r\n    // ab hier die Admin Tools für das Game\r\n    adminToolEmitter(type, msg){\r\n        if (!msg) {\r\n            this.state.socket.emit(type);\r\n        }else{\r\n            this.state.socket.emit(type,msg);\r\n        }\r\n    }\r\n\r\n    render() { \r\n        let { isInitialized, teamName, error, currentQuestion, questionVisible } = this.state;\r\n\r\n        // Login screen für das Spiel. Bevor man eingeloggt ist.\r\n        if (!isInitialized) {\r\n            return (\r\n                <>\r\n                    <h1>Willkommen bei Werbungraten</h1>\r\n                    <form className=\"flex flex-wrap input-button\">\r\n                        <input type=\"text\" placeholder=\"Teamname\" ref={this.input}></input>\r\n                        <div>{error ? error : \"\"}</div>\r\n                        <button type=\"submit\" onClick={this.submitHandler}>GO!</button>\r\n                    </form>\r\n                </>\r\n            )\r\n        } else {\r\n            // Dieser Bereich ist dafür wenn man eingeloggt ist und dann wird weiter evaluiert.\r\n\r\n            // Wenn man eingeloggt ist aber das Spiel noch nicht gestartet ist, landet man hier. \r\n            if (currentQuestion === {} ) {\r\n                return (\r\n                    <>\r\n                        <h1>Hallo {teamName}!</h1>\r\n                        <button className=\"quit\" onClick={this.quitHandler}>X</button>\r\n                        {currentQuestion === {} ? <p>Geht sofort los</p> : <p></p>}\r\n                    </>\r\n                )\r\n\r\n            } else {\r\n                // Wenn das Spiel gestartet ist, dann wird die Game UI geladen.\r\n                // frage ist das prop für die aktuelle Frage.\r\n                // Der submithandler wird für die Kommunikation über den Socket übergeben.\r\n                // Show Question steuert, ob die Frage gezeigt wird oder ob noch gewartet wird.\r\n\r\n                if (this.state.isAdmin) {\r\n                    return (\r\n                        <>\r\n                         <button className=\"quit\" onClick={this.quitHandler}>X</button>\r\n                            <AdminUI\r\n                                adminToolEmitter={this.adminToolEmitter}\r\n                                frage={currentQuestion.question}\r\n                                submitHandler={this.submitSocket}\r\n                                showQuestion={questionVisible}\r\n                                message={this.state.message}\r\n                                fragenIndex={currentQuestion.index}\r\n                                tick={this.state.timer}\r\n                                answers={this.state.answers}\r\n                                auswertung={this.state.showData}\r\n                            />\r\n                        </>\r\n                    )\r\n\r\n                } else {\r\n                    return (\r\n                        <>\r\n                        <h2><span className=\"\">Team: {teamName}</span></h2>\r\n                         <button className=\"quit\" onClick={this.quitHandler}>X</button>\r\n                            <GameUI\r\n                                frage={currentQuestion.question}\r\n                                submitHandler={this.submitSocket}\r\n                                showQuestion={questionVisible}\r\n                                message={this.state.message}\r\n                                fragenIndex={currentQuestion.index}\r\n                                tick={this.state.timer} />\r\n                        </>\r\n                    )\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}","import { Werbungraten } from './werbungraten';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Werbungraten></Werbungraten>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}